(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{368:function(a,t,e){"use strict";e.r(t);var s=e(43),r=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"immudb"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#immudb"}},[a._v("#")]),a._v(" immudb")]),a._v(" "),e("h2",{attrs:{id:"contents"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#contents"}},[a._v("#")]),a._v(" Contents")]),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#latest-binaries"}},[a._v("Latest binaries")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#build"}},[a._v("Build")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#docker"}},[a._v("Docker")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#run-immudb"}},[a._v("Run immudb")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#configuration"}},[a._v("Configuration")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#immuadmin"}},[a._v("immuadmin")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#immudb-service"}},[a._v("immudb service")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#authentication"}},[a._v("Authentication")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#backup-and-restore"}},[a._v("Backup and Restore")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#clients"}},[a._v("Clients")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#auditors"}},[a._v("Auditors")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#architecture"}},[a._v("Architecture")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#consistency-checker"}},[a._v("Consistency Checker")])])]),a._v(" "),e("h2",{attrs:{id:"latest-binaries"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#latest-binaries"}},[a._v("#")]),a._v(" Latest binaries")]),a._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/codenotary/immudb/releases/latest",target:"_blank",rel:"noopener noreferrer"}},[a._v("Get the latest builds"),e("OutboundLink")],1)]),a._v(" "),e("p",[a._v("If you run macOS you can also use Homebrew:")]),a._v(" "),e("p",[e("code",[a._v("brew install immudb")])]),a._v(" "),e("h2",{attrs:{id:"build"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#build"}},[a._v("#")]),a._v(" Build")]),a._v(" "),e("p",[a._v("clone the immudb repository locally")]),a._v(" "),e("p",[a._v("'git clone https://github.com/codenotary/immudb.git'")]),a._v(" "),e("h3",{attrs:{id:"linux"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#linux"}},[a._v("#")]),a._v(" Linux")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("GOOS")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("linux "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("GOARCH")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("amd64 "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),a._v(" immudb-static\n")])])]),e("h3",{attrs:{id:"macos"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#macos"}},[a._v("#")]),a._v(" MacOS")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("GOOS")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("darwin "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("GOARCH")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("amd64 "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),a._v(" immudb-static\n")])])]),e("h3",{attrs:{id:"windows"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#windows"}},[a._v("#")]),a._v(" Windows")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("GOOS")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("windows "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("GOARCH")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("amd64 "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),a._v(" immudb-static\n")])])]),e("h2",{attrs:{id:"docker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker"}},[a._v("#")]),a._v(" Docker")]),a._v(" "),e("h3",{attrs:{id:"build-your-own-docker-container-image"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#build-your-own-docker-container-image"}},[a._v("#")]),a._v(" build your own Docker container image")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("docker build -t myown/immudb:latest -f Dockerfile "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v("\n")])])]),e("h3",{attrs:{id:"run-immugw-in-a-container"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#run-immugw-in-a-container"}},[a._v("#")]),a._v(" run immugw in a container")]),a._v(" "),e("p",[a._v("Make sure to point to the immudb system using the environment variable IMMUGW_IMMUDB-ADDRESS")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("docker run -it -d -p "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("3322")]),a._v(":3322 -p "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("9497")]),a._v(":9497 --name immudb codenotary/immugw:latest\n")])])]),e("p",[a._v("or listen on all interfaces")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("docker run -it -d -p "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("3322")]),a._v(":3322 -p "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("9497")]),a._v(":9497 --name immudb -e "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("IMMUDB_ADDRESS")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"0.0.0.0"')]),a._v(" codenotary/immudb\n")])])]),e("h2",{attrs:{id:"run-immudb"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#run-immudb"}},[a._v("#")]),a._v(" Run immudb")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# run immudb in the foreground")]),a._v("\n./immudb\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# run immudb in the background")]),a._v("\n./immudb -d\n")])])]),e("h2",{attrs:{id:"configuration"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[a._v("#")]),a._v(" Configuration")]),a._v(" "),e("p",[a._v("work in progress")]),a._v(" "),e("h2",{attrs:{id:"immuadmin"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#immuadmin"}},[a._v("#")]),a._v(" immuadmin")]),a._v(" "),e("p",[a._v("immuadmin can be used to install and manage the immudb service for Windows and Linux")]),a._v(" "),e("h3",{attrs:{id:"linux-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#linux-2"}},[a._v("#")]),a._v(" Linux")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("GOOS")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("linux "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("GOARCH")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("amd64 "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),a._v(" immuadmin-static \n")])])]),e("h3",{attrs:{id:"windows-by-component"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#windows-by-component"}},[a._v("#")]),a._v(" Windows (by component)")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("GOOS")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("windows "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("GOARCH")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("amd64 "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("make")]),a._v(" immuadmin-static\n")])])]),e("h2",{attrs:{id:"immudb-service"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#immudb-service"}},[a._v("#")]),a._v(" immudb service")]),a._v(" "),e("p",[a._v("Please make sure to build or download the immudb and immuadmin component and save them in the same work directory when installing the service.")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("# install immudb service\n./immuadmin service immudb install\n\n# check current immudb service status\n./immuadmin service immudb status\n\n# stop immudb service\n./immuadmin service immudb stop\n\n# start immudb service\n./immuadmin service immudb start\n")])])]),e("p",[a._v("The linux service is using the following defaults:")]),a._v(" "),e("table",[e("thead",[e("tr",[e("th",[a._v("File or configuration")]),a._v(" "),e("th",[a._v("location")])])]),a._v(" "),e("tbody",[e("tr",[e("td",[a._v("all configuration files")]),a._v(" "),e("td",[a._v("/etc/immudb")])]),a._v(" "),e("tr",[e("td",[a._v("all data files")]),a._v(" "),e("td",[a._v("/var/lib/immudb")])]),a._v(" "),e("tr",[e("td",[a._v("pid file")]),a._v(" "),e("td",[a._v("/var/lib/immudb/immudb.pid")])]),a._v(" "),e("tr",[e("td",[a._v("log files")]),a._v(" "),e("td",[a._v("/var/log/immudb")])])])]),a._v(" "),e("h2",{attrs:{id:"authentication"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#authentication"}},[a._v("#")]),a._v(" Authentication")]),a._v(" "),e("p",[a._v("work in progress")]),a._v(" "),e("h2",{attrs:{id:"backup-and-restore"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#backup-and-restore"}},[a._v("#")]),a._v(" Backup and Restore")]),a._v(" "),e("p",[a._v("work in progress")]),a._v(" "),e("h2",{attrs:{id:"clients"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#clients"}},[a._v("#")]),a._v(" Clients")]),a._v(" "),e("p",[a._v("work in progress")]),a._v(" "),e("h2",{attrs:{id:"auditors"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#auditors"}},[a._v("#")]),a._v(" Auditors")]),a._v(" "),e("p",[a._v("work in progress")]),a._v(" "),e("h2",{attrs:{id:"architecture"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#architecture"}},[a._v("#")]),a._v(" Architecture")]),a._v(" "),e("p",[a._v("work in progress")]),a._v(" "),e("h2",{attrs:{id:"consistency-checker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#consistency-checker"}},[a._v("#")]),a._v(" Consistency checker")]),a._v(" "),e("h3",{attrs:{id:"how-do-you-run-it"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#how-do-you-run-it"}},[a._v("#")]),a._v(" How do you run it?")]),a._v(" "),e("p",[a._v("It is part of immudb, enabled by default and runs as a thread of immudb.\nThe routine can be disabled as follows:")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("./immudb --consistency-check"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("false\n")])])]),e("h3",{attrs:{id:"what-does-it-check"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#what-does-it-check"}},[a._v("#")]),a._v(" What does it check?")]),a._v(" "),e("p",[a._v("Consistency checker runs in a loop and continuously checks if the elements stored inside the immudb Merkle-tree are also physically stored correctly on the disk (the digest of the disk elements is the same digest stored in the related Merkle-tree leaf)")]),a._v(" "),e("h3",{attrs:{id:"how-does-it-run-its-check"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#how-does-it-run-its-check"}},[a._v("#")]),a._v(" How does it run its check?")]),a._v(" "),e("p",[e("strong",[a._v("Steps:")])]),a._v(" "),e("ol",[e("li",[a._v("reading the last root and last index stored in immudb")]),a._v(" "),e("li",[a._v("generate a range between 0 and the length of the Merkle-tree level 0 (total number of elements stored)")]),a._v(" "),e("li",[a._v("shuffles the range to get a random scan list (to be unpredictable)")]),a._v(" "),e("li",[a._v("check if every element is correctly inserted in the Merkle-tree and if the Merkle-tree leaves correctly represent the elements stored on hard disk")]),a._v(" "),e("li",[a._v("after completing the loop, the process sleeps ten seconds and restarts from scratch with a new root and index")]),a._v(" "),e("li",[a._v("in case an element does not pass the check correctly, immudb is immediately stopped and prints out a log message")])]),a._v(" "),e("p",[a._v("In order to produce a corrupted entry that is only on disk and not in the Merkle-tree, stop the immudb process and use the "),e("a",{attrs:{href:"https://github.com/codenotary/immudb/blob/master/tools/nimmu/nimmu.go",target:"_blank",rel:"noopener noreferrer"}},[a._v("nimmu"),e("OutboundLink")],1),a._v(" command:")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("go build tools/nimmu/nimmu.go \n./nimmu rawset key1 tamper\n")])])]),e("p",[a._v("Then restart immudb and should see the consistency check printing an error.")])])}),[],!1,null,null,null);t.default=r.exports}}]);