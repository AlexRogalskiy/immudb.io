(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{368:function(t,e,a){"use strict";a.r(e);var r=a(43),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"immudb"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#immudb"}},[t._v("#")]),t._v(" immudb")]),t._v(" "),a("h2",{attrs:{id:"contents"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#contents"}},[t._v("#")]),t._v(" Contents")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#build"}},[t._v("Build")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#docker"}},[t._v("Docker")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#run-immudb"}},[t._v("Run immudb")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#configuration"}},[t._v("Configuration")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#immuadmin"}},[t._v("immuadmin")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#immudb-service"}},[t._v("immudb service")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#authentication"}},[t._v("Authentication")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#backup-and-restore"}},[t._v("Backup and Restore")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#clients"}},[t._v("Clients")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#auditors"}},[t._v("Auditors")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#architecture"}},[t._v("Architecture")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#consistency-checker"}},[t._v("Consistency Checker")])])]),t._v(" "),a("p",[t._v("The following code snippets explain how to work with immudb from start to finish using Golang:")]),t._v(" "),a("h2",{attrs:{id:"build"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#build"}},[t._v("#")]),t._v(" Build")]),t._v(" "),a("h2",{attrs:{id:"docker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker"}},[t._v("#")]),t._v(" Docker")]),t._v(" "),a("h2",{attrs:{id:"run-immudb"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#run-immudb"}},[t._v("#")]),t._v(" Run immudb")]),t._v(" "),a("h2",{attrs:{id:"configuration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[t._v("#")]),t._v(" Configuration")]),t._v(" "),a("h2",{attrs:{id:"immuadmin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#immuadmin"}},[t._v("#")]),t._v(" immuadmin")]),t._v(" "),a("h2",{attrs:{id:"immudb-service"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#immudb-service"}},[t._v("#")]),t._v(" immudb service")]),t._v(" "),a("h2",{attrs:{id:"authentication"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#authentication"}},[t._v("#")]),t._v(" Authentication")]),t._v(" "),a("h2",{attrs:{id:"backup-and-restore"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#backup-and-restore"}},[t._v("#")]),t._v(" Backup and Restore")]),t._v(" "),a("h2",{attrs:{id:"clients"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#clients"}},[t._v("#")]),t._v(" Clients")]),t._v(" "),a("h2",{attrs:{id:"auditors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#auditors"}},[t._v("#")]),t._v(" Auditors")]),t._v(" "),a("h2",{attrs:{id:"architecture"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#architecture"}},[t._v("#")]),t._v(" Architecture")]),t._v(" "),a("h2",{attrs:{id:"consistency-checker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#consistency-checker"}},[t._v("#")]),t._v(" Consistency checker")]),t._v(" "),a("h3",{attrs:{id:"how-do-you-run-it"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#how-do-you-run-it"}},[t._v("#")]),t._v(" How do you run it?")]),t._v(" "),a("p",[t._v("It is part of immudb, enabled by default and runs as a thread of immudb.\nThe routine can be disabled as follows:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("./immudb --consistency-check"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("false\n")])])]),a("h3",{attrs:{id:"what-does-it-check"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what-does-it-check"}},[t._v("#")]),t._v(" What does it check?")]),t._v(" "),a("p",[t._v("Consistency checker runs in a loop and continuously checks if the elements stored inside the immudb Merkle-tree are also physically stored correctly on the disk (the digest of the disk elements is the same digest stored in the related Merkle-tree leaf)")]),t._v(" "),a("h3",{attrs:{id:"how-does-it-run-its-check"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#how-does-it-run-its-check"}},[t._v("#")]),t._v(" How does it run its check?")]),t._v(" "),a("p",[a("strong",[t._v("Steps:")])]),t._v(" "),a("ol",[a("li",[t._v("reading the last root and last index stored in immudb")]),t._v(" "),a("li",[t._v("generate a range between 0 and the length of the Merkle-tree level 0 (total number of elements stored)")]),t._v(" "),a("li",[t._v("shuffles the range to get a random scan list (to be unpredictable)")]),t._v(" "),a("li",[t._v("check if every element is correctly inserted in the Merkle-tree and if the Merkle-tree leaves correctly represent the elements stored on hard disk")]),t._v(" "),a("li",[t._v("after completing the loop, the process sleeps ten seconds and restarts from scratch with a new root and index")]),t._v(" "),a("li",[t._v("in case an element does not pass the check correctly, immudb is immediately stopped and prints out a log message")])]),t._v(" "),a("p",[t._v("In order to produce a corrupted entry that is only on disk and not in the Merkle-tree, stop the immudb process and use the "),a("a",{attrs:{href:"https://github.com/codenotary/immudb/blob/master/tools/nimmu/nimmu.go",target:"_blank",rel:"noopener noreferrer"}},[t._v("nimmu"),a("OutboundLink")],1),t._v(" command:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("go build tools/nimmu/nimmu.go \n./nimmu rawset key1 tamper\n")])])]),a("p",[t._v("Then restart immudb and should see the consistency check printing an error.")])])}),[],!1,null,null,null);e.default=s.exports}}]);