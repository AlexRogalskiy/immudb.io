(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{226:function(t,e,a){"use strict";a.r(e);var s=a(0),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"vcn-unsupport"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vcn-unsupport","aria-hidden":"true"}},[t._v("#")]),t._v(" vcn unsupport")]),t._v(" "),a("p",[t._v("Unsupport an asset")]),t._v(" "),a("h3",{attrs:{id:"synopsis"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#synopsis","aria-hidden":"true"}},[t._v("#")]),t._v(" Synopsis")]),t._v(" "),a("p",[t._v("Change an asset's status so it is equal to UNSUPPORTED.")]),t._v(" "),a("p",[t._v("Unsupport command calculates the SHA-256 hash of a digital asset\n(file, directory, container's image).\nThe hash (not the asset) and the desired status of UNSUPPORTED are then\ncryptographically signed by the signer's secret (private key).\nNext, these signed objects are sent to the blockchain where the signer’s\ntrust level and a timestamp are added.\nWhen complete, a new blockchain entry is created that binds the asset’s\nsigned hash, signed status, level, and timestamp together.")]),t._v(" "),a("p",[t._v("Note that your asset will not be uploaded but processed locally.")]),t._v(" "),a("p",[t._v("Assets are referenced by passed ARG(s) with unsupport command only accepting\n1 ARG at a time.")]),t._v(" "),a("p",[t._v("ARG must be one of:\n"),a("file",[t._v("\nfile://"),a("file",[t._v("\ndir://"),a("directory",[t._v("\ngit://"),a("repository",[t._v("\ndocker://"),a("image",[t._v("\npodman://"),a("image")])])],1)],1)],1)],1),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("vcn unsupport [flags]\n")])])]),a("h3",{attrs:{id:"options"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#options","aria-hidden":"true"}},[t._v("#")]),t._v(" Options")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("  -a, --attr key=value   add user defined attributes (repeat --attr for multiple entries)\n      --hash string      specify the hash instead of using an asset, if set no ARG(s) can be used\n  -h, --help             help for unsupport\n  -n, --name string      set the asset name\n  -p, --public           when notarized as public, the asset name and metadata will be visible to everyone\n")])])]),a("h3",{attrs:{id:"options-inherited-from-parent-commands"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#options-inherited-from-parent-commands","aria-hidden":"true"}},[t._v("#")]),t._v(" Options inherited from parent commands")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("      --config string   config file (default is $HOME/.vcn/config.json)\n  -o, --output string   output format, one of: --output=json|--output=yaml|--output=''\n")])])]),a("h3",{attrs:{id:"see-also"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#see-also","aria-hidden":"true"}},[t._v("#")]),t._v(" SEE ALSO")]),t._v(" "),a("ul",[a("li",[a("router-link",{attrs:{to:"/vcn/cmd/vcn.html"}},[t._v("vcn")]),t._v("\t - vChain CodeNotary - Notarize and authenticate, from code to production")],1)]),t._v(" "),a("h6",{attrs:{id:"auto-generated-by-spf13-cobra-on-4-oct-2019"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#auto-generated-by-spf13-cobra-on-4-oct-2019","aria-hidden":"true"}},[t._v("#")]),t._v(" Auto generated by spf13/cobra on 4-Oct-2019")])])}),[],!1,null,null,null);e.default=n.exports}}]);